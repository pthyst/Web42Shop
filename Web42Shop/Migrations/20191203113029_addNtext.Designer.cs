// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web42Shop.Data;

namespace Web42Shop.Migrations
{
    [DbContext(typeof(Web42ShopDbContext))]
    [Migration("20191203113029_addNtext")]
    partial class addNtext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Web42Shop.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("Role_Id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Role_Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Web42Shop.Models.AnoCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartStatus_Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<int>("TotalPrice");

                    b.Property<int>("TotalQuantity");

                    b.HasKey("Id");

                    b.HasIndex("CartStatus_Id");

                    b.ToTable("AnoCarts");
                });

            modelBuilder.Entity("Web42Shop.Models.AnoCartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cart_Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<int>("PriceSingle");

                    b.Property<int>("PriceTotal");

                    b.Property<int>("Product_Id");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("Cart_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("AnoCartDetails");
                });

            modelBuilder.Entity("Web42Shop.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartStatus_Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<int>("TotalPrice");

                    b.Property<int>("TotalQuantity");

                    b.Property<int>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CartStatus_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Web42Shop.Models.CartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cart_Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<int>("PriceSingle");

                    b.Property<int>("PriceTotal");

                    b.Property<int>("Product_Id");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("Cart_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Web42Shop.Models.CartStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique()
                        .HasFilter("[Status] IS NOT NULL");

                    b.ToTable("CartStatuses");
                });

            modelBuilder.Entity("Web42Shop.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<int>("Product_Id");

                    b.Property<double>("Stars");

                    b.Property<int>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("Product_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Web42Shop.Models.CommentReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Comment_Id");

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<int>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("Comment_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("CommentReplies");
                });

            modelBuilder.Entity("Web42Shop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressApartment")
                        .IsRequired();

                    b.Property<string>("AddressCity")
                        .IsRequired();

                    b.Property<string>("AddressDistrict")
                        .IsRequired();

                    b.Property<string>("AddressStreet")
                        .IsRequired();

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<string>("NameFirst")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NameLast")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NameMiddle")
                        .HasMaxLength(100);

                    b.Property<int>("OrderStatus_Id");

                    b.Property<int>("PayStatus_Id");

                    b.Property<int>("PayType_Id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("TotalPrice");

                    b.Property<int>("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatus_Id");

                    b.HasIndex("PayStatus_Id");

                    b.HasIndex("PayType_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Web42Shop.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order_Id");

                    b.Property<int>("PriceSingle");

                    b.Property<int>("PriceTotal");

                    b.Property<int>("Product_Id");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("Order_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Web42Shop.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique()
                        .HasFilter("[Status] IS NOT NULL");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("Web42Shop.Models.PayStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique()
                        .HasFilter("[Status] IS NOT NULL");

                    b.ToTable("PayStatuses");
                });

            modelBuilder.Entity("Web42Shop.Models.PayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasFilter("[Type] IS NOT NULL");

                    b.ToTable("PayTypes");
                });

            modelBuilder.Entity("Web42Shop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Admin_Id");

                    b.Property<string>("Article")
                        .HasColumnType("ntext");

                    b.Property<int>("BuyPoints");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int>("Instore");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Orders");

                    b.Property<int>("Price");

                    b.Property<int>("ProductBrand_Id");

                    b.Property<int>("ProductType_Id");

                    b.Property<double>("Saleoff");

                    b.Property<int>("Slug_Id");

                    b.Property<double>("Stars");

                    b.Property<string>("Thumbnail");

                    b.Property<int>("Views");

                    b.HasKey("Id");

                    b.HasIndex("Admin_Id");

                    b.HasIndex("ProductBrand_Id");

                    b.HasIndex("ProductType_Id");

                    b.HasIndex("Slug_Id")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Web42Shop.Models.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Admin_Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Admin_Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("Web42Shop.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Admin_Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("URL")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Admin_Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Web42Shop.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Web42Shop.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Admin_Id");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Admin_Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Web42Shop.Models.Slug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Slugs");
                });

            modelBuilder.Entity("Web42Shop.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressApartment")
                        .IsRequired();

                    b.Property<string>("AddressCity")
                        .IsRequired();

                    b.Property<string>("AddressDistrict")
                        .IsRequired();

                    b.Property<string>("AddressStreet")
                        .IsRequired();

                    b.Property<int>("BuyPoints");

                    b.Property<DateTime>("DateBirth");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateModify");

                    b.Property<string>("Email");

                    b.Property<string>("Gender");

                    b.Property<string>("NameFirst")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NameLast")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NameMiddle")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Role_Id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Role_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Web42Shop.Models.Admin", b =>
                {
                    b.HasOne("Web42Shop.Models.Role", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.AnoCart", b =>
                {
                    b.HasOne("Web42Shop.Models.CartStatus", "CartStatus")
                        .WithMany()
                        .HasForeignKey("CartStatus_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.AnoCartDetail", b =>
                {
                    b.HasOne("Web42Shop.Models.AnoCart", "AnoCart")
                        .WithMany("AnoCartDetails")
                        .HasForeignKey("Cart_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.Cart", b =>
                {
                    b.HasOne("Web42Shop.Models.CartStatus", "CartStatus")
                        .WithMany("Carts")
                        .HasForeignKey("CartStatus_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.CartDetail", b =>
                {
                    b.HasOne("Web42Shop.Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("Cart_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.Comment", b =>
                {
                    b.HasOne("Web42Shop.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.CommentReply", b =>
                {
                    b.HasOne("Web42Shop.Models.Comment", "Comment")
                        .WithMany("CommentReplies")
                        .HasForeignKey("Comment_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.User", "User")
                        .WithMany("CommentReplies")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.Order", b =>
                {
                    b.HasOne("Web42Shop.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatus_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.PayStatus", "PayStatus")
                        .WithMany("Orders")
                        .HasForeignKey("PayStatus_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.PayType", "PayType")
                        .WithMany("Orders")
                        .HasForeignKey("PayType_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.OrderDetail", b =>
                {
                    b.HasOne("Web42Shop.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.Product", b =>
                {
                    b.HasOne("Web42Shop.Models.Admin", "Admin")
                        .WithMany("Products")
                        .HasForeignKey("Admin_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.ProductBrand", "ProductBrand")
                        .WithMany("Products")
                        .HasForeignKey("ProductBrand_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductType_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web42Shop.Models.Slug", "Slug")
                        .WithOne("Product")
                        .HasForeignKey("Web42Shop.Models.Product", "Slug_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.ProductBrand", b =>
                {
                    b.HasOne("Web42Shop.Models.Admin", "Admin")
                        .WithMany("ProductBrands")
                        .HasForeignKey("Admin_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.ProductType", b =>
                {
                    b.HasOne("Web42Shop.Models.Admin", "Admin")
                        .WithMany("ProductTypes")
                        .HasForeignKey("Admin_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.Setting", b =>
                {
                    b.HasOne("Web42Shop.Models.Admin", "Admin")
                        .WithMany("Settings")
                        .HasForeignKey("Admin_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web42Shop.Models.User", b =>
                {
                    b.HasOne("Web42Shop.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
